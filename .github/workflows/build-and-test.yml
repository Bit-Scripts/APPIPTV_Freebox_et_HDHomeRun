name: Build and Test Application

on: [push, pull_request, release]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            vlc_path: /usr/lib/x86_64-linux-gnu/vlc/plugins
            spec_file: specs/main-linux.spec
            output_name: APPIPTV-Linux
          - os: windows-latest
            vlc_path: C:\Program Files\VideoLAN\VLC\plugins
            spec_file: specs/main-windows.spec
            output_name: APPIPTV-Windows.exe
          - os: macos-latest
            vlc_path: /Applications/VLC.app/Contents/MacOS/plugins
            spec_file: specs/main-macos.spec
            output_name: APPIPTV-macOS.dmg

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install pytest
          pip install responses

      - name: Install VLC and xvfb on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y vlc libxcb-cursor0 xvfb

      - name: Install VLC on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install vlc

      - name: Install VLC and create-dmg on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask vlc
          brew install create-dmg

      - name: Export VLC plugin path
        run: echo "VLC_PLUGIN_PATH=${{ matrix.vlc_path }}" >> $GITHUB_ENV

      - name: List files (debugging step)
        if: runner.os != 'Windows'
        run: |
          echo "Listing files in the repository:"
          ls -R

      - name: Build with PyInstaller using spec file
        run: |
          pyinstaller ${{ matrix.spec_file }}

      - name: Rename output files (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mv dist/APPIPTV dist/${{ matrix.output_name }}

      - name: Rename output files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mv dist/APPIPTV.exe dist/${{ matrix.output_name }}

      - name: Create DMG file (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
            --volname "APPIPTV-macOS" \
            --volicon "assets/image/APPIPTVdmgicon.icns" \
            --background "assets/image/APPIPTV-Background.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 128 \
            --icon "APPIPTV.app" 100 150 \
            --app-drop-link 500 150 \
            "dist/${{ matrix.output_name }}" \
            "dist/APPIPTV.app"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-app
          path: |
            dist/APPIPTV-Linux
            dist/APPIPTV-Windows.exe
            dist/*.dmg

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-app
          path: .

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-app
          path: .

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-app
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Français
            ### Version ${{ github.ref }} - Thème Sombre Bleuté par Défaut

            Nous sommes ravis de présenter la version ${{ github.ref }} de notre application, qui introduit un thème sombre bleuté par défaut pour une meilleure lisibilité et une expérience utilisateur améliorée. Cette mise à jour comprend également une réorganisation et une optimisation de la structure du code pour une performance accrue.

            **Installation facile :** Téléchargez le fichier, double-cliquez pour démarrer l'installation et suivez les instructions à l'écran. Assurez-vous que VLC est installé sur votre machine pour profiter pleinement des fonctionnalités de l'application.

            **Dépendances nécessaires :**
            L'application requiert VLC. Voici comment l'installer sur différentes plateformes :

            - Ubuntu :
            Utilisez apt pour installer VLC :
            ```bash
            sudo apt update
            sudo apt install vlc
            ```

            - Windows :
            Utilisez Chocolatey pour installer VLC :
            ```bash
            choco install vlc
            ```

            - macOS :
            Installez VLC via Homebrew :
            ```bash
            brew install --cask vlc
            ```

            **Pour les utilisateurs de macOS :** Si vous recevez un message indiquant que le fichier est endommagé, désactivez temporairement Gatekeeper avec la commande suivante (utilisez cette commande avec prudence) :
            ```bash
            sudo spctl --master-disable
            ```
            Après l'installation et une fois vérifié que l'application fonctionne correctement, réactivez Gatekeeper pour protéger votre système :
            ```bash
            sudo spctl --master-enable
            ```

            Nous espérons que vous apprécierez les améliorations apportées dans cette nouvelle version. N'hésitez pas à nous faire part de vos retours pour continuer à enrichir et améliorer l'application.

            ## English
            ### Version ${{ github.ref }} - Default Bluish Dark Theme

            We are excited to present version ${{ github.ref }} of our application, which introduces a default bluish dark theme for better readability and an enhanced user experience. This update also includes a reorganization and optimization of the code structure for increased performance.

            **Easy Installation:** Download the file, double-click to start the installation, and follow the on-screen instructions. Make sure VLC is installed on your machine to fully enjoy the application's features.

            **Required Dependencies:**
            The application requires VLC. Here’s how to install it on different platforms:

            - Ubuntu:
            Install VLC using apt:
            ```bash
            sudo apt update
            sudo apt install vlc
            ```

            - Windows:
            Install VLC using Chocolatey:
            ```bash
            choco install vlc
            ```

            - macOS:
            Install VLC via Homebrew:
            ```bash
            brew install --cask vlc
            ```

            **For macOS Users:** If you receive a message stating that the file is damaged, temporarily disable Gatekeeper with the following command (use this command with caution):

            ```bash
            sudo spctl --master-disable
            ```
            After installation and verifying that the application works correctly, re-enable Gatekeeper to protect your system:
            ```bash
            sudo spctl --master-enable
            ```

            We hope you enjoy the improvements in this new version. Feel free to provide us with your feedback to continue enriching and improving the application.

      - name: Upload Linux asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./APPIPTV-Linux
          asset_name: APPIPTV-Linux
          asset_content_type: application/octet-stream

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./APPIPTV-Windows.exe
          asset_name: APPIPTV-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./APPIPTV-macOS.dmg
          asset_name: APPIPTV-macOS.dmg
          asset_content_type: application/octet-stream
